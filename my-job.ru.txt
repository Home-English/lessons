Мое последнем месте работы - это разрабтка проекта биржы.
Этот проект - стартамп.
Проект построен на базе микросервисной архитектуры.
Мои задачи в этом проекте были самые разные.
Я занимался разработкой службы регистрации и аудитенфикации.
Занимался разработкой микросервиса пользовательского кошелька.
Я участвовал не только в разработке микросервисов и компонентов но еще и в настройках платформы.
Интеграции новых тегнологий в наш проект, таких как кафка, двух-факторная аудитенфикация, SMS-рассылка сообщений.
Помогал устанавливать и настраивать инструменты для сборки и разворачивания микросервисов на платформе.
На этом проекте я научился работать с платформой JHipster, генерировать и разворячивать новые микросервисы.
В этом проекте использовались такие технологии как java 8, spring-boot, spring-jpa, jhipster 5, react, kafka, angular 5, postgresql.
Для тестирования мы использовали модульное тестирование JUnit, MockUnit и интеграционное тестирование.
Наша команда состояла из 12-ми человек.
В состав этой команды входили: бекенд-разработчики (5), фронтенд-разработчики (2), консультанты (2), тим-лид команды (1), проджект-менеджер (1), аналитики (1), тестировщики (2).
Мы работали по скрам системе.
Каждый день у нас проводились дейли-митинги.
У нас были двух-недельные спринты.
В наших спринтах брали участие не только участники команды, но еще и независимые разработчики со стороны нашего заказчика.
До полного своего закрытия каждая задача выполнялась в несколько этапов:
- бизнес аналитики предоставляли нашей команде уже утвержденные от заказчика требования по проекту в целом;
- первым делом мы целой командой разработчиков обсуждали архитектуру проекта;
- согласно требованию спринта тим-лид создавал специфические задачи;
- в последствии наша команда оценивала каждую задачу;
- и проджект менеджер готовил список задач на следующий этап спринта;
- новый спринт начинался с разбора задач (или можно было взять задачу по желанию или тим-лид мог назначить задачу на разработчика);
- после реализации требований к задаче, разрабочик объязательно покрывал свой код JUnit-тестами и отправлял на код-ревью;
- (код-ревью могли просматривать паралельно несколько разработчиков) после код-ревью задача отправлялась тестировщикам;
- как правило тестирование немного опаздывало от разработки, поэтому чтобы укладываться за графиком спринты немного сдвигали чтобы успевать тестировать;
- после успешного тестирования задача уходила на продакшин;
